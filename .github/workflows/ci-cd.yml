name: mock CI/CD

on:
  workflow_dispatch: 
  push:
    branches:
      - 'feature/*'
    paths:
      - alpha/**
      - beta/**
      - gamma/**
  pull_request:
    branches:
      - 'release/*'
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history

      - name: Set environment based on the branch or PR
        id: set_env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH="${{ github.head_ref }}";
          else
            BRANCH="${{ github.ref_name }}";
          fi

          if [[ "$BRANCH" == feature/* || "$BRANCH" == bugfix/* ]]; then
            ENVIRONMENT="dev"
          elif [[ "$BRANCH" == release/* ]]; then
            ENVIRONMENT="uat"
          elif [[ "$BRANCH" == main ]]; then
            ENVIRONMENT="prod"
          else
            echo "Unknown branch, exiting"
            exit 1
          fi
          echo "environment is set to $ENVIRONMENT"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Show selected environment
        run: echo "Deployment environment is $ENVIRONMENT"

      - name: List all modified files in the branch
        id: changed_files
        run: |
          FIRST_COMMIT=$(git rev-list --boundary HEAD...origin/main | grep "^-" | head -n 1 | sed 's/^-//')
          MODIFIED_FILES=$(git diff --name-only $FIRST_COMMIT ${{ github.sha }})
          echo "$MODIFIED_FILES"
          echo "$MODIFIED_FILES" | tr '\n' ',' > files_list.txt
          echo "MODIFIED_FILES=$(cat files_list.txt)" >> $GITHUB_ENV

      - name: Set program files and zip them
        id: set_programs
        run: |
          MODIFIED_FILES="${{ env.MODIFIED_FILES }}"
          ALPHA_FILES=()
          BETA_FILES=()
          GAMMA_FILES=()

          IFS=',' read -ra FILE_ARRAY <<< "$MODIFIED_FILES"
          for file in "${FILE_ARRAY[@]}"; do
            if [[ "$file" == alpha/* ]]; then
              ALPHA_FILES+=("$file")
            elif [[ "$file" == beta/* ]]; then
              BETA_FILES+=("$file")
            elif [[ "$file" == gamma/* ]]; then
              GAMMA_FILES+=("$file")
            fi
          done

          # Zip and upload artifacts for each program
          function zip_and_upload {
            PROGRAM_NAME=$1
            FILES=("${!2}")
            ZIP_NAME="${PROGRAM_NAME}_modified_files.zip"
            if [ ${#FILES[@]} -gt 0 ]; then
              zip -r "$ZIP_NAME" "${FILES[@]}"
              echo "Zipped $PROGRAM_NAME files into $ZIP_NAME"
              mv "$ZIP_NAME" "$PROGRAM_NAME.zip"
              echo "::set-output name=${PROGRAM_NAME}_exists::true"
            else
              echo "No modified files for $PROGRAM_NAME."
              echo "::set-output name=${PROGRAM_NAME}_exists::false"
            fi
          }

          zip_and_upload "alpha" ALPHA_FILES[@]
          zip_and_upload "beta" BETA_FILES[@]
          zip_and_upload "gamma" GAMMA_FILES[@]

      - name: Upload Alpha files
        if: steps.set_programs.outputs.alpha_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: alpha_modified_files
          path: alpha.zip

      - name: Upload Beta files
        if: steps.set_programs.outputs.beta_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: beta_modified_files
          path: beta.zip

      - name: Upload Gamma files
        if: steps.set_programs.outputs.gamma_exists == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gamma_modified_files
          path: gamma.zip

  deploy:
    needs: build  # Ensure this job runs after build
    runs-on: ubuntu-latest
    steps:
      - name: Download Alpha files
        uses: actions/download-artifact@v4
        with:
          name: alpha_modified_files
          path: downloaded_files/alpha

      - name: Download Beta files
        uses: actions/download-artifact@v4
        with:
          name: beta_modified_files
          path: downloaded_files/beta

      - name: Download Gamma files
        uses: actions/download-artifact@v4
        with:
          name: gamma_modified_files
          path: downloaded_files/gamma

      - name: Extract and list downloaded files
        run: |
          echo "Extracting and listing downloaded files..."
          for program in alpha beta gamma; do
            if [ -f "downloaded_files/$program.zip" ]; then
              unzip "downloaded_files/$program.zip" -d "extracted_$program"
              echo "Contents of $program.zip:"
              ls "extracted_$program"
            else
              echo "Artifact $program.zip does not exist."
            fi
          done

      - name: Deployment into server
        run: |
          echo "Deploying to the ${{ env.ENVIRONMENT }} environment..."
