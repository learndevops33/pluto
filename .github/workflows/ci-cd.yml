name: mock CI/CD

on:
  workflow_dispatch: 
  push:
    branches:
      - 'feature/*'
    paths:
      - alpha/**
      - beta/**
      - gamma/**
  pull_request:
    branches:
      - 'release/*'
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch full history

    - name: Set environment based on the branch or PR
      run: |
        # Check if it's a pull request and use GITHUB_HEAD_REF
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BRANCH="${{ github.head_ref }}"
        else
          BRANCH="${{ github.ref_name }}"
        fi

        # Determine the environment based on the branch
        if [[ "$BRANCH" == feature/* || "$BRANCH" == bugfix/* ]]; then
          ENVIRONMENT="dev"
        elif [[ "$BRANCH" == release/* ]]; then
          ENVIRONMENT="uat"
        elif [[ "$BRANCH" == main ]]; then
          ENVIRONMENT="prod"
        else
          echo "Unknown branch, exiting"
          exit 1
        fi
        echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
      shell: bash

    - name: Show selected environment
      run: echo "Deployment environment is $ENVIRONMENT"

    - name: Find the first commit of the branch
      run: |
        # Find the first commit on the current branch by using git merge-base with the parent branch (main)
        FIRST_COMMIT=$(git rev-list --boundary HEAD...origin/main | grep "^-" | head -n 1 | sed 's/^-//')
        echo "FIRST_COMMIT=$FIRST_COMMIT" >> $GITHUB_ENV

    - name: List all modified files in the branch
      id: changed_files
      run: |
        echo "The following files were modified in this branch:"
        MODIFIED_FILES=$(git diff --name-only $FIRST_COMMIT ${{ github.sha }})
        echo "$MODIFIED_FILES"
        echo "$MODIFIED_FILES" | tr '\n' ',' > files_list.txt  # Save file list as a comma-separated string to a file
        echo "MODIFIED_FILES=$(cat files_list.txt)" >> $GITHUB_ENV  # Write the comma-separated list to the environment variable

    - name: Zip the modified files
      run: |
        for file in $(echo $MODIFIED_FILES | tr ',' '\n'); do
          # Zip only the modified files and preserve folder structure
          zip -r modified_files.zip "$file"
        done

    - name: Upload artifact with environment name
      uses: actions/upload-artifact@v3
      with:
        name: modified-files-archive-${{ env.ENVIRONMENT }}
        path: modified_files.zip
