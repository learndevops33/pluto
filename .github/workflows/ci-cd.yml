name: mock CI/CD

on:
  workflow_dispatch: 
  push:
    branches:
      - 'feature/*'
    paths:
      - alpha/**
      - beta/**
      - gamma/**
  pull_request:
    branches:
      - 'release/*'
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history

      - name: Set environment based on the branch or PR
        id: set_env
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH="${{ github.head_ref }}"
          else
            BRANCH="${{ github.ref_name }}"
          fi

          if [[ "$BRANCH" == feature/* || "$BRANCH" == bugfix/* ]]; then
            ENVIRONMENT="dev"
          elif [[ "$BRANCH" == release/* ]]; then
            ENVIRONMENT="uat"
          elif [[ "$BRANCH" == main ]]; then
            ENVIRONMENT="prod"
          else
            echo "Unknown branch, exiting"
            exit 1
          fi
          echo "environment is set to $ENVIRONMENT"
          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV

      - name: Show selected environment
        run: echo "Deployment environment is $ENVIRONMENT"

      - name: Find the first commit of the branch
        run: |
          FIRST_COMMIT=$(git rev-list --boundary HEAD...origin/main | grep "^-" | head -n 1 | sed 's/^-//')
          echo "FIRST_COMMIT=$FIRST_COMMIT" >> $GITHUB_ENV

      - name: List all modified files in the branch
        id: changed_files
        run: |
          echo "The following files were modified in this branch:"
          MODIFIED_FILES=$(git diff --name-only $FIRST_COMMIT ${{ github.sha }})
          echo "$MODIFIED_FILES"
          echo "$MODIFIED_FILES" | tr '\n' ',' > files_list.txt
          echo "MODIFIED_FILES=$(cat files_list.txt)" >> $GITHUB_ENV

      - name: Run actions based on modified files
        run: |
          echo "Running actions based on modified files..."
          MODIFIED_FILES="${{ env.MODIFIED_FILES }}"

          # Initialize arrays for each program's modified files
          ALPHA_FILES=()
          BETA_FILES=()
          GAMMA_FILES=()

          # Populate the arrays based on modified files
          IFS=',' read -ra FILE_ARRAY <<< "$MODIFIED_FILES"
          for file in "${FILE_ARRAY[@]}"; do
            if [[ "$file" == alpha/* ]]; then
              ALPHA_FILES+=("$file")
            elif [[ "$file" == beta/* ]]; then
              BETA_FILES+=("$file")
            elif [[ "$file" == gamma/* ]]; then
              GAMMA_FILES+=("$file")
            fi
          done

          # Function to zip and upload artifacts
          function zip_and_upload {
            PROGRAM_NAME=$1
            FILES=("${!2}")  # Use indirect reference to get array

            if [ ${#FILES[@]} -gt 0 ]; then
              ZIP_NAME="${PROGRAM_NAME}_modified_files.zip"
              zip -r "$ZIP_NAME" "${FILES[@]}"
              echo "Zipped $PROGRAM_NAME files into $ZIP_NAME"
              echo "Uploading $ZIP_NAME as artifact..."
              # Upload the artifact using actions/upload-artifact
              echo "name=${ZIP_NAME}" >> $GITHUB_ENV
              echo "path=${ZIP_NAME}" >> $GITHUB_ENV
              echo "##[upload-artifact]name=${ZIP_NAME},path=${ZIP_NAME}" >> $GITHUB_ENV
            else
              echo "No modified files for $PROGRAM_NAME."
            fi
          }

          # Zip and upload artifacts for each program
          zip_and_upload "alpha" ALPHA_FILES[@]
          zip_and_upload "beta" BETA_FILES[@]
          zip_and_upload "gamma" GAMMA_FILES[@]

      - name: Upload individual artifacts
        run: |
          # Upload the artifacts listed in artifacts_to_upload.txt
          echo "##[group]Uploading artifacts"
          for artifact in $(cat artifacts_to_upload.txt); do
            echo "Uploading artifact $artifact"
            # Use the actions/upload-artifact action to upload each artifact
            echo "name=${artifact}" >> $GITHUB_ENV
            echo "path=${artifact}" >> $GITHUB_ENV
          done
          echo "##[endgroup]"

  deploy:
    needs: build  # Ensure this job runs after build
    runs-on: ubuntu-latest
    steps:
      - name: Download individual artifacts for deployment
        run: |
          echo "Downloading artifacts..."
          for program in alpha beta gamma; do
            ARTIFACT_NAME="${program}_modified_files.zip"
            echo "Downloading artifact: $ARTIFACT_NAME"
            actions/download-artifact@v3
            - name: Download artifact for $program
              uses: actions/download-artifact@v3
              with:
                name: $ARTIFACT_NAME
                path: downloaded_files
          done

      - name: Extract and list downloaded files
        run: |
          for program in alpha beta gamma; do
            ARTIFACT_NAME="${program}_modified_files.zip"
            unzip downloaded_files/$ARTIFACT_NAME -d "extracted_$program"
            echo "Contents of $ARTIFACT_NAME:"
            ls "extracted_$program"
          done

      - name: Deployment into server
        run: |
          echo "Deploying to the ${{ env.ENVIRONMENT }} environment..."
